name: ci
# CI workflow for cuenv - optimized with comprehensive caching
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
env:
  CARGO_TERM_COLOR: always
  CUENV_ENV: ci
permissions:
  id-token: write
  contents: read
jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable]
    steps:
      - uses: actions/checkout@v4
      # Cargo cache - for fast Rust builds
      - name: cache-cargo-target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.rust }}-cargo-
            ${{ runner.os }}-cargo-
      # Nix setup with all caching layers
      - name: nix-install
        uses: DeterminateSystems/nix-installer-action@main
      - name: magic-nix-cache
        uses: DeterminateSystems/magic-nix-cache-action@main
      - name: cache-nix-store
        uses: nix-community/cache-nix-action@v5
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          restore-prefixes-first-match: nix-${{ runner.os }}-
          gc-max-store-size-linux: 1073741824
          gc-max-store-size-macos: 1073741824
      - name: nix-cache
        uses: cachix/cachix-action@v15
        with:
          name: cuenv
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          skipPush: ${{ matrix.rust != 'stable' }}
      # Build, check, and test
      - name: nix-build-and-check
        run: |
          nix build .#cuenv --print-build-logs
          nix flake check --print-build-logs -L
      - name: cuenv-test-all
        run: |
          nix develop --command cargo nextest run --profile ci --no-fail-fast
      - name: cuenv-test-examples
        run: |
          # Use the binary from Nix build (already cached)
          mkdir -p target/debug
          cp result/bin/cuenv target/debug/

          # To ensure we test the local CUE schema, not a remote one,
          # we manually populate the CUE module cache
          export CUE_CACHE_DIR="examples/cue.mod/pkg"
          export SCHEMA_PATH="$CUE_CACHE_DIR/github.com/rawkode/cuenv@v0"
          mkdir -p "$SCHEMA_PATH"
          cp -r cue/* "$SCHEMA_PATH/"

          # Run the example tests
          ./scripts/test-examples.sh
  test-beta:
    runs-on: ${{ matrix.os }}
    # Only run beta on main branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [beta]
    steps:
      - uses: actions/checkout@v4
      # Cargo cache - for fast Rust builds
      - name: cache-cargo-target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.rust }}-cargo-
            ${{ runner.os }}-cargo-
      # Nix setup with all caching layers
      - name: nix-install
        uses: DeterminateSystems/nix-installer-action@main
      - name: magic-nix-cache
        uses: DeterminateSystems/magic-nix-cache-action@main
      - name: cache-nix-store
        uses: nix-community/cache-nix-action@v5
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          restore-prefixes-first-match: nix-${{ runner.os }}-
          gc-max-store-size-linux: 1073741824
          gc-max-store-size-macos: 1073741824
      - name: nix-cache
        uses: cachix/cachix-action@v15
        with:
          name: cuenv
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          skipPush: true # Don't push beta builds to cache
      # Build and test with beta
      - name: nix-build-and-check
        run: |
          nix build .#cuenv --print-build-logs
          nix flake check --print-build-logs -L
      - name: cuenv-test-all
        run: |
          nix develop --command cargo nextest run --profile ci --no-fail-fast
  coverage:
    runs-on: ubuntu-latest
    needs: [test]
    if: always() && (needs.test.result == 'success')
    steps:
      - uses: actions/checkout@v4
      # Cargo cache - for fast Rust builds
      - name: cache-cargo-target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ubuntu-latest-stable-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ubuntu-latest-stable-cargo-
            ubuntu-latest-cargo-
      # Nix setup with all caching layers
      - name: nix-install
        uses: DeterminateSystems/nix-installer-action@main
      - name: magic-nix-cache
        uses: DeterminateSystems/magic-nix-cache-action@main
      - name: cache-nix-store
        uses: nix-community/cache-nix-action@v5
        with:
          primary-key: nix-ubuntu-latest-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          restore-prefixes-first-match: nix-ubuntu-latest-
          gc-max-store-size-linux: 1073741824
      - name: nix-cache
        uses: cachix/cachix-action@v15
        with:
          name: cuenv
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          skipPush: false
      # Generate and upload coverage
      - name: generate-coverage
        run: |
          # Use Nix cache - build will be instant if already cached
          nix build .#cuenv
          # Generate coverage report using cached dependencies
          nix develop --command cargo llvm-cov nextest --lcov --output-path lcov.info
      - name: upload-coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./lcov.info
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
