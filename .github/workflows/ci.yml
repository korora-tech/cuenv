name: ci
# CI workflow for cuenv - optimized with comprehensive caching
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
env:
  CARGO_TERM_COLOR: always
  CUENV_ENV: ci
permissions:
  id-token: write
  contents: read
jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [namespace-profile-linux-caching, namespace-profile-macos-caching]
        rust: [stable]
    steps:
      - uses: actions/checkout@v4
      - name: namespacelabs-nix-cache
        uses: namespacelabs/nscloud-cache-action@v1
        with:
          path: /tmp/nix
      - name: nix-install
        uses: DeterminateSystems/nix-installer-action@main
        with:
          mac-volume-label: "nix-cache"
      - name: nix-build-and-check
        run: |
          nix build .#cuenv --print-build-logs
          nix flake check --print-build-logs -L
      - name: cuenv-test-all
        run: |
          nix develop --command cargo nextest run --profile ci --no-fail-fast
      - name: cuenv-test-examples
        run: |
          # Use the binary from Nix build (already cached)
          mkdir -p target/debug
          cp result/bin/cuenv target/debug/

          # To ensure we test the local CUE schema, not a remote one,
          # we manually populate the CUE module cache
          export CUE_CACHE_DIR="examples/cue.mod/pkg"
          export SCHEMA_PATH="$CUE_CACHE_DIR/github.com/rawkode/cuenv@v0"
          mkdir -p "$SCHEMA_PATH"
          cp -r cue/* "$SCHEMA_PATH/"

          # Run the example tests
          ./scripts/test-examples.sh
  coverage:
    runs-on:
      - namespace-profile-linux-caching
      - nscloud-cache-tag-nix-cache
    needs: [test]
    if: always() && (needs.test.result == 'success')
    steps:
      - uses: actions/checkout@v4
      - name: namespacelabs-nix-cache
        uses: namespacelabs/nscloud-cache-action@v1
        with:
          path: /nix
      - name: nix-install
        uses: DeterminateSystems/nix-installer-action@main
      - name: generate-coverage
        run: |
          # Use Nix cache - build will be instant if already cached
          nix build .#cuenv
          # Generate coverage report using cached dependencies
          nix develop --command cargo llvm-cov nextest --lcov --output-path lcov.info
      - name: upload-coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./lcov.info
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
