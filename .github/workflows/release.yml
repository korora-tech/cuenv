name: Release
permissions:
  pull-requests: write
  contents: write
on:
  push:
    branches:
      - main
  workflow_dispatch: # Allow manual triggering
jobs:
  # Run release-plz to update versions and changelog
  release-plz:
    name: Release-plz
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
      pull-requests: write
      id-token: write # Required for Trusted Publishing OIDC
    concurrency:
      group: release-plz-${{ github.ref }}
      cancel-in-progress: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # Setup Trusted Publishing authentication for crates.io
      # After first manual release, configure this repo as trusted publisher on crates.io
      - name: Authenticate with crates.io (Trusted Publishing)
        uses: rust-lang/crates-io-auth-action@v1
        id: auth
      # Use the official release-plz action - no build required!
      - name: Run release-plz
        uses: release-plz/action@v0.5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ steps.auth.outputs.token }}
  # Build release binaries when a tag is created
  build-binaries:
    name: Build Release Binaries
    runs-on: ${{ matrix.os }}
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: aarch64-apple-darwin
            suffix: aarch64-apple-darwin
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get version from tag
        id: get_version
        run: |
          # Extract version from tag (NO 'v' prefix - project convention)
          # Tag format is just "0.4.7" (no 'v' prefix)
          TAG="${{ github.ref_name }}"
          VERSION="$TAG"  # Use tag directly as it has no prefix
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"
      - name: Install Nix
        uses: cachix/install-nix-action@v30
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup dependencies via Nix
        run: |
          # Use Nix development shell which includes all required dependencies
          # This works cross-platform and includes Rust, Go, protobuf, and nextest
      - name: Run tests
        run: |
          # Run tests for workspace but allow failures to not block the release
          nix develop -c cargo nextest run --target ${{ matrix.target }} --profile ci --no-fail-fast --workspace || true
        continue-on-error: true
      - name: Build binary
        run: |
          # Set up environment based on target
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            export RUSTFLAGS="-C link-arg=-framework -C link-arg=Security -C link-arg=-framework -C link-arg=CoreFoundation"
          fi
          export CGO_ENABLED=1

          # Build the binary from workspace - explicitly target the CLI crate
          nix develop -c cargo build --release --target ${{ matrix.target }} --package cuenv

          # Create artifacts directory
          mkdir -p artifacts
          cp target/${{ matrix.target }}/release/cuenv artifacts/cuenv

          # Strip debug symbols (Linux only)
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            strip artifacts/cuenv
          fi

          # Check binary info
          echo "Binary info:"
          file artifacts/cuenv
          echo ""
          echo "Binary size: $(ls -lh artifacts/cuenv | awk '{print $5}')"
      - name: Package
        run: |
          cd artifacts
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          tar czf cuenv-${VERSION}-${{ matrix.suffix }}.tar.gz cuenv
          echo "ASSET_PATH=artifacts/cuenv-${VERSION}-${{ matrix.suffix }}.tar.gz" >> $GITHUB_ENV
          echo "ASSET_NAME=cuenv-${VERSION}-${{ matrix.suffix }}.tar.gz" >> $GITHUB_ENV
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ASSET_NAME }}
          path: ${{ env.ASSET_PATH }}
      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.ASSET_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
