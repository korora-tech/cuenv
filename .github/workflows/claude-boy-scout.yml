name: claude-boy-scout
on:
  workflow_dispatch: {}
  schedule:
    # Run at 8am, 10am, 12pm, 2pm, 4pm, 6pm, 8pm UTC
    - cron: '0 8 * * *'
    - cron: '0 10 * * *'
    - cron: '0 12 * * *'
    - cron: '0 14 * * *'
    - cron: '0 16 * * *'
    - cron: '0 18 * * *'
    - cron: '0 20 * * *'
jobs:
  make-one-improvement:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          mode: agent
          model: "claude-opus-4-20250514"
          additional_permissions: |
            contents: write
            pull-requests: write
            actions: read
          custom_instructions: |
            Your task is to analyze the current state of the cuenv project and identify ONE specific documentation improvement that would help users better understand or use the project.

            Steps to follow:
            1. Analyze the codebase thoroughly - read source files, tests, examples, and existing documentation
            2. Identify gaps between what the code does and what the documentation explains
            3. Find ONE specific, focused documentation improvement (e.g., missing usage example, unclear configuration option, undocumented feature, outdated information)
            4. Create a new branch with name format: docs/auto-improve-YYYYMMDD-HHMM
            5. Make the documentation improvement - be specific and helpful
            6. Commit with message: "docs: [specific description of improvement]"
            7. Create a pull request with:
               - Clear title describing the improvement
               - Body explaining what was missing/unclear and how this helps users
               - Label the PR with "documentation" if possible

            Focus on practical improvements that directly help users:
            - Missing examples for common use cases
            - Clarifying confusing configuration options
            - Documenting discovered but undocumented features
            - Fixing inconsistencies between code behavior and docs
            - Adding helpful troubleshooting information

            Do NOT:
            - Make trivial changes like fixing typos only
            - Add unnecessary verbose explanations
            - Change code, only documentation
            - Create multiple improvements - focus on ONE high-value change
