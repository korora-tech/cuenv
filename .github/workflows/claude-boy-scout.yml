name: claude-boy-scout
on:
  workflow_dispatch: {}
  schedule:
    # Run at 8am, 10am, 12pm, 2pm, 4pm, 6pm, 8pm UTC
    - cron: '0 8 * * *'
    - cron: '0 10 * * *'
    - cron: '0 12 * * *'
    - cron: '0 14 * * *'
    - cron: '0 16 * * *'
    - cron: '0 18 * * *'
    - cron: '0 20 * * *'
jobs:
  make-one-improvement:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Generate branch name
        id: branch
        run: |
          # Generate branch name with timestamp
          BRANCH_NAME="docs/auto-improve-$(date +%Y%m%d-%H%M)"
          echo "name=$BRANCH_NAME" >> $GITHUB_OUTPUT
      - name: Create and checkout feature branch
        run: |
          git config --global user.name 'claude-automated[bot]'
          git config --global user.email 'claude-automated[bot]@users.noreply.github.com'
          git checkout -b "${{ steps.branch.outputs.name }}"
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          mode: agent
          model: "claude-opus-4-20250514"
          max_turns: "5"
          allowed_tools: "Bash(git:*),Bash(gh:*),Bash(nix:*),Edit,Read,Write(website/**),Write(*.md),Write(docs/**),Grep,Glob,LS"
          additional_permissions: |
            contents: write
            pull-requests: write
            actions: read
          direct_prompt: |
            Your task is to analyze the current state of the cuenv project and identify ONE specific documentation improvement that would help users better understand or use the project.

            Steps to follow:
            1. Analyze the codebase thoroughly - read source files, tests, examples, and existing documentation
            2. Identify gaps between what the code does and what the documentation explains
            3. Find ONE specific, focused documentation improvement (e.g., missing usage example, unclear configuration option, undocumented feature, outdated information)
            4. Make the documentation improvement - be specific and helpful
            5. Do not commit the changes - the workflow will handle that

            Focus on practical improvements that directly help users:
            - Missing examples for common use cases
            - Clarifying confusing configuration options
            - Documenting discovered but undocumented features
            - Fixing inconsistencies between code behavior and docs
            - Adding helpful troubleshooting information

            Do NOT:
            - Make trivial changes like fixing typos only
            - Add unnecessary verbose explanations
            - Change code, only documentation
            - Create multiple improvements - focus on ONE high-value change
            - Commit or push changes - the workflow will handle git operations
      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet && git diff --cached --quiet; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected"
          fi
      - name: Commit changes
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          git add .
          IMPROVEMENT_DESC=$(git diff --cached --name-only | head -1 | xargs basename | sed 's/\.[^.]*$//')
          git commit -m "docs: improve documentation for $IMPROVEMENT_DESC" \
            -m "Automated documentation improvement via Claude Boy Scout" \
            -m "Generated with Claude Code automation"
      - name: Push feature branch
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          git push origin "${{ steps.branch.outputs.name }}"
      - name: Create Pull Request
        if: steps.changes.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = `${{ steps.branch.outputs.name }}`;

            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üìö Documentation Improvement - ${new Date().toISOString().split('T')[0]}`,
              head: branchName,
              base: 'main',
              body: [
                '## Automated Documentation Improvement',
                '',
                'This PR was automatically created by the Claude Boy Scout workflow to improve project documentation.',
                '',
                '### Changes Made',
                'Claude Code analyzed the codebase and identified a documentation gap that needed addressing.',
                '',
                '### Review Notes',
                '- Please review the documentation changes for accuracy',
                '- Verify that the improvement helps users understand the project better',
                '- Check for any technical inaccuracies',
                '',
                '---',
                '*Generated automatically by Claude Boy Scout workflow*'
              ].join('\n')
            });

            // Add documentation label if possible
            try {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: ['documentation']
              });
            } catch (e) {
              console.log('Could not add label:', e.message);
            }

            console.log(`Created PR #${pr.number}: ${pr.html_url}`);
      - name: Output results
        run: |-
          if [ "${{ steps.changes.outputs.has_changes }}" == "true" ]; then
            echo "‚úÖ Claude Boy Scout executed successfully and created a documentation PR"
            echo "Branch: ${{ steps.branch.outputs.name }}"
          else
            echo "‚ÑπÔ∏è Claude Boy Scout executed but no documentation improvements were needed"
          fi
