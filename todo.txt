# Implementation Plan: Clean MCP/Task-Server Protocol & Documentation Updates

## Phase 1: Clean MCP Implementation (No Backwards Compatibility)

### MCP Server Protocol Cleanup
- [ ] Update TaskServerProvider in crates/task/src/protocol.rs to accept Arc<Config>
- [ ] Remove redundant CUE parsing and HashMap<String, TaskConfig> from TaskServerProvider::new()
- [ ] Simplify TaskServerProvider to use pre-loaded config.get_tasks() instead of file I/O
- [ ] Remove duplicate configuration loading methods from protocol layer
- [ ] Update MCP tool handlers to use Arc<Config> instead of re-parsing files

### MCP Command Integration  
- [ ] Update crates/cli/src/commands/mcp.rs to pass Arc<Config> to protocol layer
- [ ] Remove any remaining file path parameters that are now redundant
- [ ] Ensure MCP server uses centralized Config for all task definitions
- [ ] Test MCP integration with centralized configuration

## Phase 2: Task Executor Integration

### Task System Updates
- [ ] Update crates/task/src/lib.rs to expose executor_v2_simple as default
- [ ] Remove commented out executor_v2 complex version permanently  
- [ ] Update crates/env/src/lib.rs to expose manager_v2 as default manager
- [ ] Ensure all task execution flows use Arc<Config> consistently

### Command System Updates
- [ ] Update remaining commands in crates/cli/src/execute.rs to use Arc<Config>
- [ ] Convert Task, Env, Shell, Cache, and Internal commands to accept Arc<Config>
- [ ] Remove any lingering file-based configuration loading in command handlers
- [ ] Ensure completion functions use centralized config data

## Phase 3: Documentation Updates

### Website Architecture Documentation
- [ ] Update website/src/content/docs/architecture.md for centralized config changes
- [ ] Document the new ConfigLoader pattern and Arc<Config> sharing
- [ ] Explain elimination of repeated CUE file parsing
- [ ] Add diagrams showing new configuration flow

### API Documentation Updates  
- [ ] Update website/src/content/docs/api/ for MCP protocol changes
- [ ] Document simplified TaskServerProvider API
- [ ] Update task execution documentation for new executor
- [ ] Verify all code examples reflect new centralized approach

### User Guide Updates
- [ ] Review website/src/content/docs/getting-started.md for accuracy
- [ ] Update any references to old configuration loading patterns
- [ ] Ensure examples show current best practices
- [ ] Update troubleshooting guides for new architecture

## Phase 4: Testing & Validation

### Integration Testing
- [ ] Run nix develop -c cargo nextest run --profile ci to verify all tests pass
- [ ] Test MCP server functionality with centralized configuration
- [ ] Verify task execution works with new Arc<Config> pattern
- [ ] Run scripts/test-examples.sh to ensure examples still work

### Performance Validation
- [ ] Measure configuration loading time improvement (should be faster)
- [ ] Verify memory usage is optimized with Arc sharing
- [ ] Test concurrent access patterns with Arc<Config>
- [ ] Benchmark task execution performance

### Code Quality
- [ ] Run nix develop -c cargo clippy to ensure no warnings
- [ ] Run nix develop -c treefmt to format all code
- [ ] Run nix flake check for comprehensive validation
- [ ] Review code for any remaining backwards compatibility remnants

## Phase 5: Cleanup & Finalization

### Remove Legacy Code
- [ ] Remove any unused configuration structs or methods
- [ ] Clean up imports and dependencies
- [ ] Remove commented-out legacy executor versions
- [ ] Eliminate any dead code from refactoring

### Final Documentation Pass
- [ ] Review all website/src/content/docs/ files for accuracy
- [ ] Update CLAUDE.md if any development patterns changed
- [ ] Ensure README reflects current architecture
- [ ] Update any inline code documentation

### Release Preparation  
- [ ] Update CHANGELOG.md with architecture improvements
- [ ] Verify version numbers are consistent
- [ ] Test release build process with nix build .#cuenv
- [ ] Prepare release notes highlighting performance improvements

## Success Criteria

✅ Single ConfigLoader handles all startup configuration loading
✅ All components use Arc<Config> for thread-safe sharing  
✅ Zero redundant CUE file parsing throughout application
✅ MCP protocol uses centralized configuration exclusively
✅ All tests pass with new architecture
✅ Website documentation accurately reflects new patterns
✅ Performance improved due to eliminated redundant I/O
✅ Code quality maintained with no clippy warnings